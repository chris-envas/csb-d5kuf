{"version":3,"sources":["redux.js","components/_UserModifer.js","components/_User.js","App.js","index.js"],"names":["Context","React","createContext","Provider","store","state","user","name","group","setState","newState","console","log","listener","map","fn","subscrible","push","index","indexOf","splice","connect","mapStateToProps","mapDispatchToProps","Component","props","useContext","useState","setUpdate","data","dispatch","action","reducer","dispatchers","useEffect","oldState","key","compareState","merageAllProps","type","UserModifer","updateUser","value","onChange","e","target","User","App","Business3","Business1","UserWrapper","Business2","UserModiferWrapper","rootElement","document","getElementById","ReactDOM","render"],"mappings":"+JACMA,EAAUC,IAAMC,cAAc,MAC5BC,EAAaH,EAAbG,SAEFC,EAAQ,CACZC,MAAO,CACLC,KAAM,CACJC,KAAM,eAERC,MAAO,CACLD,KAAM,WAGVE,SATY,SASHC,GACPC,QAAQC,IAAIF,GACZN,EAAMC,MAAQK,EACdN,EAAMS,SAASC,KAAI,SAACC,GAAD,OAAQA,EAAGX,EAAMC,WAEtCQ,SAAU,GACVG,WAfY,SAeDD,GAET,OADAX,EAAMS,SAASI,KAAKF,GACb,WACL,IAAMG,EAAQd,EAAMS,SAASM,QAAQJ,GACrCX,EAAMS,SAASO,OAAOF,EAAO,MAe7BG,EAAU,SAACC,EAAiBC,GAAlB,OAAyC,SAACC,GACxD,OAAO,SAACC,GACN,MAA4BC,qBAAW1B,GAA/BK,EAAR,EAAQA,MAAOI,EAAf,EAAeA,SACf,EAAsBkB,mBAAS,IAAtBC,EAAT,oBACMC,EAAOP,EAAkBA,EAAgBjB,GAASA,EAClDyB,EAAW,SAACC,GAChBtB,EAASuB,EAAQ3B,EAAO0B,KAEpBE,EAAcV,EAChBA,EAAmBO,GACnBA,EACJI,qBAAU,WACR,OAAO9B,EAAMY,YAAW,SAACX,GACvB,IAAMK,EAAWY,EAAkBA,EAAgBjB,GAASA,GAvB/C,SAAC8B,EAAUzB,GAE9B,IAAK,IAAI0B,KAAOD,EACd,GAAIA,EAASC,KAAS1B,EAAS0B,GAC7B,OAAO,EAGX,OANa,GAuBHC,CAAaR,EAAMnB,IACrBkB,EAAU,SAGb,CAACN,IACJ,IAAMgB,EAAc,uCAAQb,GAAUI,GAASI,GAC/C,OAAO,cAACT,EAAD,eAAec,OAIpBN,EAAU,SAAC3B,EAAO0B,GACtB,GAAoB,eAAhBA,EAAOQ,KACT,OAAO,2BACFlC,GACA,CACDC,KAAK,2BACAD,EAAMC,MACNyB,EAAOF,SCrDLW,EAdK,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,WAAYnC,EAAW,EAAXA,KACjCK,QAAQC,IAAI,eAMZ,OACE,8BACE,uBAAO8B,MAAOpC,EAAKC,KAAMoC,SAPZ,SAACC,GAChBH,EAAW,CACTlC,KAAMqC,EAAEC,OAAOH,cCDNI,EALF,SAAC,GAAc,IAAZxC,EAAW,EAAXA,KAEd,OADAK,QAAQC,IAAI,QACL,yCAAYN,EAAKC,SCGbwC,EAAM,WACjB,OACE,eAAC5C,EAAD,CAAUuC,MAAOtC,EAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC4C,EAAD,QAKAC,EAAY,kBAChB,8CACa,cAACC,EAAD,QAITC,EAAY,kBAChB,4CAEE,cAACC,EAAD,QAIEJ,EAAY3B,GAAQ,SAAChB,GACzB,MAAO,CACLG,MAAOH,EAAMG,SAFCa,EAIf,YAAgB,IAAbb,EAAY,EAAZA,MAEJ,OADAG,QAAQC,IAAI,aACL,8BAAMJ,EAAMD,UAGf6C,EAAqB/B,EAAQ,MAAM,SAACS,GACxC,MAAO,CACLW,WAAY,SAACZ,GACXC,EAAS,CAAES,KAAM,aAAcV,aAHVR,CAMxBmB,GACGU,EAAc7B,GAAQ,SAAChB,GAC3B,MAAO,CACLC,KAAMD,EAAMC,QAFIe,CAIjByB,GC5CGO,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,K","file":"static/js/main.a55d6621.chunk.js","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nconst Context = React.createContext(null);\r\nconst { Provider } = Context;\r\n\r\nconst store = {\r\n  state: {\r\n    user: {\r\n      name: \"Hello world\"\r\n    },\r\n    group: {\r\n      name: \"group1\"\r\n    }\r\n  },\r\n  setState(newState) {\r\n    console.log(newState);\r\n    store.state = newState;\r\n    store.listener.map((fn) => fn(store.state));\r\n  },\r\n  listener: [],\r\n  subscrible(fn) {\r\n    store.listener.push(fn);\r\n    return () => {\r\n      const index = store.listener.indexOf(fn);\r\n      store.listener.splice(index, 1);\r\n    };\r\n  }\r\n};\r\n\r\nconst compareState = (oldState, newState) => {\r\n  let status = false;\r\n  for (let key in oldState) {\r\n    if (oldState[key] !== newState[key]) {\r\n      return true;\r\n    }\r\n  }\r\n  return status;\r\n};\r\n\r\nconst connect = (mapStateToProps, mapDispatchToProps) => (Component) => {\r\n  return (props) => {\r\n    const { state, setState } = useContext(Context);\r\n    const [, setUpdate] = useState({});\r\n    const data = mapStateToProps ? mapStateToProps(state) : state;\r\n    const dispatch = (action) => {\r\n      setState(reducer(state, action));\r\n    };\r\n    const dispatchers = mapDispatchToProps\r\n      ? mapDispatchToProps(dispatch)\r\n      : dispatch;\r\n    useEffect(() => {\r\n      return store.subscrible((state) => {\r\n        const newState = mapStateToProps ? mapStateToProps(state) : state;\r\n        if (compareState(data, newState)) {\r\n          setUpdate({});\r\n        }\r\n      });\r\n    }, [mapStateToProps]);\r\n    const merageAllProps = { ...props, ...data, ...dispatchers };\r\n    return <Component {...merageAllProps} />;\r\n  };\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  if (action.type === \"updateData\") {\r\n    return {\r\n      ...state,\r\n      ...{\r\n        user: {\r\n          ...state.user,\r\n          ...action.data\r\n        }\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nexport { store, connect, Context, Provider };\r\n","import React from \"react\";\r\n\r\nconst UserModifer = ({ updateUser, user }) => {\r\n  console.log(\"UserModifer\");\r\n  const onChange = (e) => {\r\n    updateUser({\r\n      name: e.target.value\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <input value={user.name} onChange={onChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserModifer;\r\n","const User = ({ user }) => {\r\n  console.log(\"User\");\r\n  return <div>User: {user.name}</div>;\r\n};\r\n\r\nexport default User;\r\n","import React from \"react\";\nimport { connect, store, Provider } from \"./redux\";\nimport UserModifer from \"./components/_UserModifer\";\nimport User from \"./components/_User\";\n\nexport const App = () => {\n  return (\n    <Provider value={store}>\n      <Business1></Business1>\n      <Business2></Business2>\n      <Business3 />\n    </Provider>\n  );\n};\n\nconst Business1 = () => (\n  <div>\n    Business1: <UserWrapper />\n  </div>\n);\n\nconst Business2 = () => (\n  <div>\n    Business2\n    <UserModiferWrapper />\n  </div>\n);\n\nconst Business3 = connect((state) => {\n  return {\n    group: state.group\n  };\n})(({ group }) => {\n  console.log(\"Business3\");\n  return <div>{group.name}</div>;\n});\n\nconst UserModiferWrapper = connect(null, (dispatch) => {\n  return {\n    updateUser: (data) => {\n      dispatch({ type: \"updateData\", data });\n    }\n  };\n})(UserModifer);\nconst UserWrapper = connect((state) => {\n  return {\n    user: state.user\n  };\n})(User);\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}